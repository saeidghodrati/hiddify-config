global
    log /dev/log local0

defaults
    log global
    timeout connect 5s
    timeout client 50s
    timeout client-fin 50s
    timeout server 50s
    timeout tunnel 1h
    default-server init-addr none
    default-server inter 15s fastinter 2s downinter 5s rise 3 fall 3

### standalone stats page
listen stats
        # accessible at http://192.168.1.100/haproxy?stats
        bind 0.0.0.0:8181
      	mode http
      	option httplog
      	stats enable
      	stats admin if TRUE
      	stats refresh 5m

















frontend https-in
    bind :443,:::443 v4v6
    mode tcp
    option tcplog
    option dontlognull
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }
    acl tls1_2 req.ssl_ver 3.3
    acl tls1_3 req.ssl_ver 3.4
    
    acl alpnh2 req.ssl_alpn h2 

    #reality_configs
    acl reality_domains req.ssl_sni -i REALITY_SERVER_NAMES
    use_backend reality if reality_domains

    
    
    acl tg_domains req.ssl_sni -i TELEGRAM_FAKE_TLS_DOMAIN
    acl ss_domains req.ssl_sni -i sstlsdomain
    acl shadowtls_domains req.ssl_sni -i shadowtlsdomain

    # # acl ssr_domains req.ssl_sni -i ssrtlsdomain

    # use_backend xray if tls1_3 xray_domains
    # use_backend xraydecoy if xray_domains
    use_backend telegram if tls1_3 tg_domains
    use_backend telegram if tg_domains
    # use_backend tgdecoy if tg_domains

    use_backend ssfake if tls1_3 ss_domains
    use_backend ssfake if ss_domains
    # use_backend ssdecoy if ss_domains
    
    use_backend shadowtls if shadowtls_domains
    
    # use_backend ssr if tls1_3 ssr_domains
    # use_backend ssr if ssr_domains
    # use_backend ssrdecory if ssr_domains
    acl is_cdn src -f /opt/hiddify-config/haproxy/cloudflare.lst -f /opt/hiddify-config/haproxy/arvan.lst -f /opt/hiddify-config/haproxy/cloudfront.lst
    use_backend to_https_in_ssl if is_cdn
    # default sni behavior
    # default_backend xray
    acl xray_domains req.ssl_sni -i FORCE_XRAY_DOMAINS
    use_backend xray_force if xray_domains

    default_backend to_https_in_ssl
    

backend to_https_in_ssl
    mode tcp
    server haproxy abns@https_in_ssl send-proxy-v2

# backend to_https_in_ssl
#     mode tcp
#     server xray abns@https_in_ssl send-proxy-v2

frontend http-https-in
    mode http
    bind :80,:::80 v4v6
    bind abns@https_in_ssl accept-proxy ssl crt /opt/hiddify-config/ssl/ alpn h2,http/1.1,h3
    #bind quic4@abns@https_in_ssl accept-proxy ssl crt /opt/hiddify-config/ssl/ alpn h3    
    # http-response set-header alt-svc "h3=\":443\";ma=900;"

    # acl singbox_domains req.ssl_sni -i SINGBOX_DOMAINS
    # acl xray_domains req.ssl_sni -i XRAY_DOMAINS

    # use_backend xray if xray_domains
    # use_backend to_https_in_ssl if singbox_domains

    acl is_cloudflare src -f /opt/hiddify-config/haproxy/cloudflare.lst
    acl is_arvan src -f /opt/hiddify-config/haproxy/arvan.lst
    acl is_cloudfront src -f /opt/hiddify-config/haproxy/cloudfront.lst

    http-request set-header X-Real-IP %[req.hdr(CF-Connecting-IP)] if is_cloudflare
    http-request set-header X-Real-IP %[req.hdr(X-Forward-For)] if is_cloudfront
    http-request set-header X-Real-IP %[req.hdr(X-Forward-For)] if is_arvan
    http-request set-header X-Real-IP %[src] if !is_cloudflare !is_arvan !is_cloudfront

    #reality_http_configs

    acl tg_domains hdr(:authority) -i TELEGRAM_FAKE_TLS_DOMAIN
    acl tg_domains hdr(host) -i TELEGRAM_FAKE_TLS_DOMAIN
    acl ss_domains hdr(host) -i sstlsdomain
    acl ss_domains hdr(:authority) -i sstlsdomain
    acl shadowtls_domains hdr(host) -i shadowtlsdomain
    acl ss_domains hdr(:authority) -i shadowtlsdomain
    # acl ssr_domains hdr(host) -i ssrtlsdomain

    # acl server_domains hdr(host) -i SERVER_DOMAINS
    # use_backend default_http if server_domains
    use_backend tgdecoy_http if tg_domains
    use_backend shadowtls_decoy_http if shadowtls_domains

    # use_backend ssdecoy if sstlsdomain
    # use_backend ssrdecory if ssr_domains



    # acl grpc_multi path_end TunMulti
    # acl grpc_multi path_end PATH_GRPC/TunMulti
    # use_backend nginx_dispatcher_h2 if grpc_multi 

    acl is_grpc_req hdr(content-type) -i application/grpc
    use_backend grpc_dispatcher if is_grpc_req
    

    # acl vmessg path_beg /PATH_VMESSPATH_GRPC
    # acl vlessg path_beg /PATH_VLESSPATH_GRPC
    # acl v2rayg path_beg /PATH_SSPATH_GRPC
    # acl trojang path_beg /PATH_TROJANPATH_GRPC
    # use_backend vmessg if vmessg
    # use_backend vlessg if vlessg
    # use_backend v2rayg if v2rayg
    # use_backend trojang if trojang

     acl is_put_request method PUT
    
    acl vmesst path_beg /PATH_VMESSPATH_TCP 
    acl vlesst path_beg /PATH_VLESSPATH_TCP
    acl v2rayt path_beg /PATH_SSPATH_TCP
    acl trojant path_beg /PATH_TROJANPATH_TCP

    acl vmessw path_beg /PATH_VMESSPATH_WS
    acl vlessw path_beg /PATH_VLESSPATH_WS
    acl v2rayw path_beg /PATH_SSPATH_WS
    acl trojanw path_beg /PATH_TROJANPATH_WS
    
    
    

    use_backend vmesst if vmesst is_put_request
    use_backend vmesst_get if vmesst 
    use_backend vlesst if vlesst
    use_backend v2rayt if v2rayt
    use_backend trojant if trojant

    use_backend vmessw if vmessw
    use_backend vlessw if vlessw
    use_backend v2rayw if v2rayw
    use_backend trojanw if trojanw



        #acl other path_beg /BASE_PROXY_PATH




    acl speak_alpn_h2 ssl_fc_alpn -i h2
    use_backend nginx_dispatcher_h2 if speak_alpn_h2

# acl speak_alpn_h2 ssl_fc_alpn -i h2
    # use_backend nginx_dispatcher_h2 if speak_alpn_h2

    default_backend nginx_dispatcher_h2
    
backend nginx_dispatcher_h2
    mode http
    server nginx unix@/opt/hiddify-config/nginx/run/h2.sock proto h2 send-proxy-v2

backend nginx_dispatcher
    mode http
    server nginx unix@/opt/hiddify-config/nginx/run/h1.sock send-proxy-v2










backend decoy
    mode tcp
    server xraydecoy abns@xtlsindecoy send-proxy-v2

backend tgdecoy
    mode tcp
    server tgdecoy TELEGRAM_FAKE_TLS_DOMAIN

backend tgdecoy_http
    mode http
    server tgdecoy_http TELEGRAM_FAKE_TLS_DOMAIN

backend telegram
    mode tcp
    server telegram 127.0.0.1:1001

backend ssdecoy_http
    mode http
    server ssdecoy sstlsdomain

backend ssfake
    mode tcp
    server ssfake 127.0.0.1:1002


# # Access logs
# log-format %ci:%cp\ [%t]\ %ft\ %b/%s\ %Tcc\ %Tw/%Tc/%Tr/%Ta\ %ST\ %B\ %CC\ %CS\ %tsc\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq\ %hr\ %hs\ %{+Q}r
# option httplog
# option http-server-close
# option forwardfor except 127.0.0.1  # Add X-Forwarded-For header except for HAProxy itself
# log /opt/hiddify/hiddify-config/log/system/haproxy.log local0

# # Error logs
# option dontlog-normal
# log /opt/hiddify/hiddify-config/log/system/haproxy.err.log local0






backend shadowtls_decoy_http
    mode http
    server shadowtls_decoy_http shadowtlsdomain

backend shadowtls_decoy
    mode tcp
    server shadowtls_decoy shadowtlsdomain


# backend ssrdecory
#     server ssrdecoy ssrtlsdomain

# backend ssr
#     server ssr 127.0.0.1:1004


backend xray_force
    mode tcp
    # server xray unix@/dev/shm/hiddify-xtls-main.sock
    server xray abns@xtlsin send-proxy-v2

